@using PinPoint.Models.PainEntries
@model PainEntryEditVM

@{
    ViewData["Title"] = "Edit Pain Entry";
}

<h1>Edit Pain Entry</h1>

<h5>Make changes to your pain entry.</h5>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="EntryDate" class="control-label">Entry Date</label>
                <input asp-for="EntryDate" class="form-control-plaintext" readonly tabindex="-1" style="pointer-events:none;" />
                <span asp-validation-for="EntryDate" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="EntryTime" class="control-label">Entry Time</label>
                <input asp-for="EntryTime" class="form-control-plaintext" readonly tabindex="-1" style="pointer-events:none;" />
                <span asp-validation-for="EntryTime" class="text-danger"></span>
            </div>

            @* SYMPTOMS *@
            <div class="form-group">
                <label class="control-label">Selected Symptoms (Up to 3)</label>
                <div id="selectedSymptomsContainer" class="mb-2" style="min-height: 30px; border: 1px solid #ced4da; border-radius: 0.25rem; padding: 0.375rem;">
                    <span class="text-muted" id="noSymptomsText">No symptoms selected</span>
                </div>
            </div>
            <div class="form-group">
                <label asp-for="SymptomIds" class="control-label">Select Existing Symptom (Double-click to add)</label>
                <select class="form-control" id="symptomDropdown" asp-items="ViewBag.Symptoms" size="5" style="height: auto;">
                </select>
                <span asp-validation-for="SymptomIds" class="text-danger"></span>
                <span id="symptomMaxError" class="text-danger" style="display: none;">You can only select up to 3 symptoms</span>
            </div>
            <div class="form-group">
                <label asp-for="NewSymptomName" class="control-label">Or Add New Symptom</label>
                <input asp-for="NewSymptomName" class="form-control" id="newSymptomInput"
                       placeholder="Or enter a new symptom name" />
                <span id="newSymptomMaxError" class="text-danger" style="display: none;">Cannot add new symptom: maximum of 3 already selected</span>
                <span asp-validation-for="NewSymptomName" class="text-danger"></span>
            </div>

            @* LOCATIONS *@
            <div class="form-group">
                <label class="control-label">Selected Locations (Up to 3)</label>
                <div id="selectedLocationsContainer" class="mb-2" style="min-height: 30px; border: 1px solid #ced4da; border-radius: 0.25rem; padding: 0.375rem;">
                    <span class="text-muted" id="noLocationsText">No locations selected</span>
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationIds" class="control-label">Select Existing Location (Double-click to add)</label>
                <select class="form-control" id="locationDropdown" asp-items="ViewBag.Locations" size="5" style="height: auto;">
                </select>
                <span asp-validation-for="LocationIds" class="text-danger"></span>
                <span id="locationMaxError" class="text-danger" style="display: none;">You can only select up to 3 locations</span>
            </div>
            <div class="form-group">
                <label asp-for="NewLocationName" class="control-label">Or Add New Pain Location</label>
                <input asp-for="NewLocationName" class="form-control" id="newLocationInput"
                       placeholder="Or enter a new location" />
                <span id="newLocationMaxError" class="text-danger" style="display: none;">Cannot add new location: maximum of 3 already selected</span>
                <span asp-validation-for="NewLocationName" class="text-danger"></span>
            </div>

            @* TRIGGERS *@
            <div class="form-group">
                <label class="control-label">Selected Triggers (Up to 3)</label>
                <div id="selectedTriggersContainer" class="mb-2" style="min-height: 30px; border: 1px solid #ced4da; border-radius: 0.25rem; padding: 0.375rem;">
                    <span class="text-muted" id="noTriggersText">No triggers selected</span>
                </div>
            </div>
            <div class="form-group">
                <label asp-for="TriggerIds" class="control-label">Select Existing Triggers (Double-click to add)</label>
                <select class="form-control" id="triggerDropdown" asp-items="ViewBag.Triggers" size="5" style="height: auto;">
                </select>
                <span asp-validation-for="TriggerIds" class="text-danger"></span>
                <span id="triggerMaxError" class="text-danger" style="display: none;">You can only select up to 3 triggers</span>
            </div>
            <div class="form-group">
                <label asp-for="NewTriggerName" class="control-label">Or Add New Pain Trigger</label>
                <input asp-for="NewTriggerName" class="form-control" id="newTriggerInput"
                       placeholder="Or enter a new trigger" />
                <span id="newTriggerMaxError" class="text-danger" style="display: none;">Cannot add new trigger: maximum of 3 already selected</span>
                <span asp-validation-for="NewTriggerName" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="PainIntensity" class="control-label"></label>
                <select asp-for="PainIntensity" class="form-control" id="painIntensitySelect">
                    <option value="0">0 - No Pain</option>
                    <option value="1">1 - Minimal</option>
                    <option value="2">2 - Mild</option>
                    <option value="3">3 - Uncomfortable</option>
                    <option value="4">4 - Moderate</option>
                    <option value="5">5 - Distracting</option>
                    <option value="6">6 - Distressing</option>
                    <option value="7">7 - Unmanagable</option>
                    <option value="8">8 - Intense</option>
                    <option value="9">9 - Severe</option>
                    <option value="10">10 - Unable To Move</option>
                </select>
                <div id="painIntensityDescription" class="form-text text-muted"></div>
                <span asp-validation-for="PainIntensity" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PainDescription" class="control-label"></label>
                <input asp-for="PainDescription" class="form-control" />
                <span asp-validation-for="PainDescription" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="DurationMinutes" class="control-label"></label>
                <select asp-for="DurationMinutes" class="form-control">
                    <option value="0">Less than 1 minute</option>
                    <option value="1">1 - 5 minutes</option>
                    <option value="2">5 - 15 minutes</option>
                    <option value="3">15 - 30 minutes</option>
                    <option value="4">30 - 60 minutes</option>
                    <option value="5">1 - 2 hours</option>
                    <option value="6">2 - 4 hours</option>
                    <option value="7">4 - 8 hours</option>
                    <option value="8">8 - 12 hours</option>
                    <option value="9">More than 12 hours</option>
                    <option value="10">All day (constant)</option>
                </select>
                <span asp-validation-for="DurationMinutes" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ActivitiesBeforePain" class="control-label"></label>
                <input asp-for="ActivitiesBeforePain" class="form-control" />
                <span asp-validation-for="ActivitiesBeforePain" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ReliefMethodsTried" class="control-label"></label>
                <input asp-for="ReliefMethodsTried" class="form-control" />
                <span asp-validation-for="ReliefMethodsTried" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ReliefEffectiveness" class="control-label"></label>
                <select asp-for="ReliefEffectiveness" class="form-control" id="reliefEffectivenessSelect">
                    <option value="0">0 - No Relief</option>
                    <option value="1">1 - Almost none</option>
                    <option value="2">2 - Very slight</option>
                    <option value="3">3 - Slight</option>
                    <option value="4">4 - Mild</option>
                    <option value="5">5 - Moderate</option>
                    <option value="6">6 - Noticeable</option>
                    <option value="7">7 - Significant</option>
                    <option value="8">8 - Strong</option>
                    <option value="9">9 - Near complete</option>
                    <option value="10">10 - Complete</option>
                </select>
                <div id="reliefEffectivenessDescription" class="form-text text-muted"></div>
                <span asp-validation-for="ReliefEffectiveness" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="AdditionalNotes" class="control-label"></label>
                <input asp-for="AdditionalNotes" class="form-control" />
                <span asp-validation-for="AdditionalNotes" class="text-danger"></span>
            </div>
            <div id="symptomIdsContainer"></div>
            <div id="locationIdsContainer"></div>
            <div id="triggerIdsContainer"></div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    @* DROP DOWN DESCRIPTIONS *@
    <script>
        const painDescriptions = {
            0: "I have no pain",
            1: "My pain is hardly noticeable",
            2: "I have a low level of pain. I am aware of my pain only when I pay attention to it.",
            3: "My pain bothers me but I can ignore it most of the time.",
            4: "I am constantly aware of my pain but I can continue most activities.",
            5: "I think about my pain most of the time. I cannot do some of the activities I need to do each day because of the pain.",
            6: "I think about my pain all of the time. I give up many activities because of my pain.",
            7: "I am in pain all the time. It keeps me from doing most activities.",
            8: "My pain is so severe that it is hard to think of anything else. Talking and listening are difficult.",
            9: "My pain is all that I can think about. I can barely talk or move because of the pain.",
            10: "I am in bed and can't move due to my pain. I need someone to take me to the emergency room to get help for my pain."
        };

        const reliefDescriptions = {
            0: "I have no relief, my pain is unchanged.",
            1: "I have hardly any relief; my pain is barely less noticeable.",
            2: "I have a low level of relief. I am aware of the relief only when I pay attention to it.",
            3: "My relief is present but my pain still bothers me most of the time.",
            4: "I am constantly aware of my relief, but my pain still prevents some activities.",
            5: "I think about my relief most of the time. I can now do some of the activities I need to do each day.",
            6: "I think about my relief all the time. I can return to many activities because my pain is much less.",
            7: "I have significant relief most of the time. It allows me to do most activities.",
            8: "My relief is so great that it is easy to think of other things. My pain is only a slight discomfort.",
            9: "I have almost complete relief. My pain is barely noticeable and I can move freely.",
            10: "I have complete relief and feel no pain at all."
        };

        function updateDescription(selectId, descId, descriptions) {
            const select = document.getElementById(selectId);
            const descDiv = document.getElementById(descId);
            const value = select.value;
            descDiv.textContent = descriptions[value] || '';
        }

        document.getElementById('painIntensitySelect').addEventListener('change', function() {
            updateDescription('painIntensitySelect', 'painIntensityDescription', painDescriptions);
        });
        document.getElementById('reliefEffectivenessSelect').addEventListener('change', function() {
            updateDescription('reliefEffectivenessSelect', 'reliefEffectivenessDescription', reliefDescriptions);
        });

        // Show description for initial values on page load
        updateDescription('painIntensitySelect', 'painIntensityDescription', painDescriptions);
        updateDescription('reliefEffectivenessSelect', 'reliefEffectivenessDescription', reliefDescriptions);
    </script>

    @* PRELOAD EXISTING VALUES *@
    <script>
        var existingSymptomIds = @Html.Raw(Json.Serialize(Model.SymptomIds ?? new List<int>()));
        var existingLocationIds = @Html.Raw(Json.Serialize(Model.LocationIds ?? new List<int>()));
        var existingTriggerIds = @Html.Raw(Json.Serialize(Model.TriggerIds ?? new List<int>()));
    </script>

    <script>
        // Validation function to check if we can add new items
        function validateNewItemInput(selectedMap, inputId, errorSpanId) {
            const input = document.getElementById(inputId);
            const errorSpan = document.getElementById(errorSpanId);

            if (!input || !errorSpan) return true;

            input.addEventListener('input', function() {
                if (this.value.trim() !== '' && selectedMap.size >= 3) {
                    errorSpan.style.display = 'block';
                    this.setCustomValidity('Maximum selections reached');
                } else {
                    errorSpan.style.display = 'none';
                    this.setCustomValidity('');
                }
            });
        }

        document.addEventListener('DOMContentLoaded', function() {
            // Initialize Maps and DOM references
            const selectedSymptoms = new Map();
            const symptomDropdown = document.getElementById('symptomDropdown');
            const symptomsContainer = document.getElementById('selectedSymptomsContainer');
            const noSymptomsText = document.getElementById('noSymptomsText');

            const selectedLocations = new Map();
            const locationDropdown = document.getElementById('locationDropdown');
            const locationsContainer = document.getElementById('selectedLocationsContainer');
            const noLocationsText = document.getElementById('noLocationsText');

            const selectedTriggers = new Map();
            const triggerDropdown = document.getElementById('triggerDropdown');
            const triggersContainer = document.getElementById('selectedTriggersContainer');
            const noTriggersText = document.getElementById('noTriggersText');

            function updateDisplay(selectedMap, container, noItemsText, containerDivId, inputName, badgeClass) {
                // Remove old badges
                container.querySelectorAll(`.${badgeClass}`).forEach(badge => badge.remove());

                // Get the container div for hidden inputs
                const containerDiv = document.getElementById(containerDivId);
                if (containerDiv) {
                    containerDiv.innerHTML = ''; // Clear old hidden inputs
                }

                if (selectedMap.size === 0) {
                    noItemsText.style.display = 'inline';
                }
                else {
                    noItemsText.style.display = 'none';
                    selectedMap.forEach((text, id) => {
                        // Create badge
                        const badge = document.createElement('span');
                        badge.className = `badge bg-primary ${badgeClass} me-1 mb-1`;
                        badge.style.cursor = 'pointer';
                        badge.textContent = text + ' ×';
                        badge.title = 'Click to remove';
                        badge.addEventListener('click', function() {
                            selectedMap.delete(id);
                            updateDisplay(selectedMap, container, noItemsText, containerDivId, inputName, badgeClass);
                        });
                        container.appendChild(badge);

                        // Create hidden input
                        if (containerDiv) {
                            const input = document.createElement('input');
                            input.type = 'hidden';
                            input.name = inputName;
                            input.value = id;
                            containerDiv.appendChild(input);
                        }
                    });
                }
            }

            // Pre-load existing symptoms
            if (existingSymptomIds && existingSymptomIds.length > 0) {
                existingSymptomIds.forEach(id => {
                    const option = Array.from(symptomDropdown.options).find(opt => opt.value == id);
                    if (option) {
                        selectedSymptoms.set(id.toString(), option.text);
                    }
                });
                updateDisplay(selectedSymptoms, symptomsContainer, noSymptomsText, 'symptomIdsContainer', 'SymptomIds', 'symptom-badge');
            }

            // Pre-load existing locations
            if (existingLocationIds && existingLocationIds.length > 0) {
                existingLocationIds.forEach(id => {
                    const option = Array.from(locationDropdown.options).find(opt => opt.value == id);
                    if (option) {
                        selectedLocations.set(id.toString(), option.text);
                    }
                });
                updateDisplay(selectedLocations, locationsContainer, noLocationsText, 'locationIdsContainer', 'LocationIds', 'location-badge');
            }

            // Pre-load existing triggers
            if (existingTriggerIds && existingTriggerIds.length > 0) {
                existingTriggerIds.forEach(id => {
                    const option = Array.from(triggerDropdown.options).find(opt => opt.value == id);
                    if (option) {
                        selectedTriggers.set(id.toString(), option.text);
                    }
                });
                updateDisplay(selectedTriggers, triggersContainer, noTriggersText, 'triggerIdsContainer', 'TriggerIds', 'trigger-badge');
            }

            // Add validation for new item inputs
            validateNewItemInput(selectedSymptoms, 'newSymptomInput', 'newSymptomMaxError');
            validateNewItemInput(selectedLocations, 'newLocationInput', 'newLocationMaxError');
            validateNewItemInput(selectedTriggers, 'newTriggerInput', 'newTriggerMaxError');

            // Symptom dropdown double-click handler
            symptomDropdown.addEventListener('dblclick', function(e) {
                const selectedOption = this.options[this.selectedIndex];
                if (selectedOption && selectedOption.value) {
                    const id = selectedOption.value;
                    const text = selectedOption.text;
                    if (selectedSymptoms.has(id)) {
                        selectedSymptoms.delete(id);
                        document.getElementById('symptomMaxError').style.display = 'none';
                    } else {
                        if (selectedSymptoms.size >= 3) {
                            document.getElementById('symptomMaxError').style.display = 'block';
                            return;
                        }
                        selectedSymptoms.set(id, text);
                        document.getElementById('symptomMaxError').style.display = 'none';
                    }
                    updateDisplay(selectedSymptoms, symptomsContainer, noSymptomsText, 'symptomIdsContainer', 'SymptomIds', 'symptom-badge');
                }
            });

            // Location dropdown double-click handler
            locationDropdown.addEventListener('dblclick', function(e) {
                const selectedOption = this.options[this.selectedIndex];
                if (selectedOption && selectedOption.value) {
                    const id = selectedOption.value;
                    const text = selectedOption.text;
                    if (selectedLocations.has(id)) {
                        selectedLocations.delete(id);
                        document.getElementById('locationMaxError').style.display = 'none';
                    } else {
                        if (selectedLocations.size >= 3) {
                            document.getElementById('locationMaxError').style.display = 'block';
                            return;
                        }
                        selectedLocations.set(id, text);
                        document.getElementById('locationMaxError').style.display = 'none';
                    }
                    updateDisplay(selectedLocations, locationsContainer, noLocationsText, 'locationIdsContainer', 'LocationIds', 'location-badge');
                }
            });

            // Trigger dropdown double-click handler
            triggerDropdown.addEventListener('dblclick', function(e) {
                const selectedOption = this.options[this.selectedIndex];
                if (selectedOption && selectedOption.value) {
                    const id = selectedOption.value;
                    const text = selectedOption.text;
                    if (selectedTriggers.has(id)) {
                        selectedTriggers.delete(id);
                        document.getElementById('triggerMaxError').style.display = 'none';
                    } else {
                        if (selectedTriggers.size >= 3) {
                            document.getElementById('triggerMaxError').style.display = 'block';
                            return;
                        }
                        selectedTriggers.set(id, text);
                        document.getElementById('triggerMaxError').style.display = 'none';
                    }
                    updateDisplay(selectedTriggers, triggersContainer, noTriggersText, 'triggerIdsContainer', 'TriggerIds', 'trigger-badge');
                }
            });

            // Link dropdown and text input (clear dropdown when typing)
            function linkDropdownAndInput(dropdownId, inputId) {
                const dropdown = document.getElementById(dropdownId);
                const input = document.getElementById(inputId);
                if (!dropdown || !input) return;
                input.addEventListener('input', function() {
                    if (this.value !== '') dropdown.value = '';
                });
            }

            linkDropdownAndInput('locationDropdown', 'newLocationInput');
            linkDropdownAndInput('triggerDropdown', 'newTriggerInput');
            linkDropdownAndInput('symptomDropdown', 'newSymptomInput');
        });
    </script>
}
